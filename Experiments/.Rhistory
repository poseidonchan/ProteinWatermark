write.csv(df, file = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/processedRNA/DOGMAseq-DIG-RNA-ch_cxds_scores.csv")
datasets <- names(data.list[["count"]])
for (method in methods) {
# Extract the index and scores
index <- data.list[["count"]][[dataset]]@Dimnames[[2]]
scores <- score.list.all[[dataset]][[method]]
# Check if the lengths match
if (length(scores) != length(index)) {
stop(paste("Length of scores and index do not match for dataset:", dataset, "and method:", method, "!"))
}
# Create the dataframe
df <- data.frame(Index = index, Scores = scores)
# View the dataframe (optional)
View(df)
# Write the dataframe to a CSV file
file_path <- paste0("/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/processedRNA/", dataset, "_", method, "_scores.csv")
write.csv(df, file = file_path, row.names = FALSE)
}
for (dataset in datasets) {
# Loop through each method
for (method in methods) {
# Extract the index and scores
index <- data.list[["count"]][[dataset]]@Dimnames[[2]]
scores <- score.list.all[[dataset]][[method]]
# Check if the lengths match
if (length(scores) != length(index)) {
stop(paste("Length of scores and index do not match for dataset:", dataset, "and method:", method, "!"))
}
# Create the dataframe
df <- data.frame(Index = index, Scores = scores)
# View the dataframe (optional)
View(df)
# Write the dataframe to a CSV file
file_path <- paste0("/Users/chan/Desktop/DoubletsDetection/data/", dataset, "/processedRNA/", dataset, "_", method, "_scores.csv")
write.csv(df, file = file_path, row.names = FALSE)
}
}
methods
methods <- c('cxds','bcds','hybrid','scDblFinder', 'Scrublet','DoubletFinder')
for (dataset in datasets) {
# Loop through each method
for (method in methods) {
# Extract the index and scores
index <- data.list[["count"]][[dataset]]@Dimnames[[2]]
scores <- score.list.all[[dataset]][[method]]
# Check if the lengths match
if (length(scores) != length(index)) {
stop(paste("Length of scores and index do not match for dataset:", dataset, "and method:", method, "!"))
}
# Create the dataframe
df <- data.frame(Index = index, Scores = scores)
# View the dataframe (optional)
View(df)
# Write the dataframe to a CSV file
file_path <- paste0("/Users/chan/Desktop/DoubletsDetection/data/", dataset, "/processedRNA/", dataset, "_", method, "_scores.csv")
write.csv(df, file = file_path, row.names = FALSE)
}
}
for (dataset in datasets) {
# Loop through each method
for (method in methods) {
# Extract the index and scores
index <- data.list[["count"]][[dataset]]@Dimnames[[2]]
scores <- score.list.all[[dataset]][[method]]
# Check if the lengths match
if (length(scores) != length(index)) {
stop(paste("Length of scores and index do not match for dataset:", dataset, "and method:", method, "!"))
}
# Create the dataframe
df <- data.frame(Index = index, Scores = scores)
# Write the dataframe to a CSV file
file_path <- paste0("/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/processedRNA/", dataset, "_", method, "_scores.csv")
write.csv(df, file = file_path)
}
}
library('myDoubletCollection')
library('myDoubletCollection')
datasets <- list.files('/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/processedRNA', pattern="\\.rds$", full=TRUE)
names(datasets) <- gsub("\\.rds$","",basename(datasets))
methods <- c('Scrublet','cxds','bcds','hybrid','scDblFinder','DoubletFinder')
datasets <- lapply(datasets, readRDS)
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
library(devtools)
myDoubletCollection = devtools::build('/Users/chan/Desktop/DoubletsDetection/vaeda_manuscript/R/myDoubletCollection')
devtools::install_local(myDoubletCollection)
library('myDoubletCollection')
library('myDoubletCollection')
datasets <- list.files('/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/processedRNA/', pattern="\\.rds$", full=TRUE)
names(datasets) <- gsub("\\.rds$","",basename(datasets))
methods <- c('Scrublet','cxds','bcds','hybrid','scDblFinder','DoubletFinder')
datasets <- lapply(datasets, readRDS)
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
myDoubletCollection = devtools::build('/Users/chan/Desktop/DoubletsDetection/vaeda_manuscript/R/myDoubletCollection')
devtools::install_local(myDoubletCollection)
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
library('myDoubletCollection')
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
library('myDoubletCollection')
datasets <- list.files('/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/processedRNA/', pattern="\\.rds$", full=TRUE)
names(datasets) <- gsub("\\.rds$","",basename(datasets))
methods <- c('Scrublet','cxds','bcds','hybrid','scDblFinder','DoubletFinder')
datasets <- lapply(datasets, readRDS)
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
methods <- c('cxds','bcds','hybrid','scDblFinder','DoubletFinder')
set.seed(123)
scores <- lapply(datasets, FUN=function(x){
x <- x[[1]]
x
lapply(setNames(methods, methods), FUN=function(method){
st <- system.time( sco <- switch(method,
"DoubletFinder"=myDoubletCollection:::CallDoubletFinder(x, calls=T),
"Scrublet"=myDoubletCollection:::CallScrublet(x, calls=T),
#"scDblFinder.random"=scDblFinder(x, clusters=FALSE)$scDblFinder.score,
"scDblFinder"= myDoubletCollection:::CallscDblFinder(x, clusters=FALSE, calls=T, includePCs=10, max_depth=4),
myDoubletCollection:::Callscds(count=x, method=method, calls=T)
))
list(scores=sco, time=st)
})
})
for (data in names(datasets)){
i=0
for (method in methods){
tmp <- scores[[data]][[method]]$scores
write.table(tmp, file=paste0("/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/processedRNA/", data, '_', method, "_scores_1.csv"), sep=',', quote=F)
}
}
devtools::install_github("GreenleafLab/ArchR", ref="master", repos = BiocManager::repositories())
library(ArchR)
set.seed(1)
addArchRThreads(threads = 6)
af <- createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz")
af <- createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz",sampleNames="DOGMAseq1")
addArchRGenome("hg19")
af <- createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz",sampleNames="DOGMAseq1")
af
?addDoubletScores()
addDoubletScores(input=af)
addDoubletScores(input="/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/DOGMAseq1.arrow")
addArchRThreads(threads = 1)
addDoubletScores(input="/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/DOGMAseq1.arrow")
library(ArchR)
addDoubletScores(input="/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/DOGMAseq1.arrow")
inputFiles <- getTutorialData("Hematopoiesis")
addArchRGenome("hg19")
addArchRThreads(threads = 6)
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
filterTSS = 4, #Dont set this too high because you can always increase later
filterFrags = 1000,
addTileMat = TRUE,
addGeneScoreMat = TRUE
)
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
minTSS = 4, #Dont set this too high because you can always increase later
minFrags = 1000,
addTileMat = TRUE,
addGeneScoreMat = TRUE
)
addArchRThreads(threads = 1)
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
minTSS = 4, #Dont set this too high because you can always increase later
minFrags = 1000,
addTileMat = TRUE,
addGeneScoreMat = TRUE
)
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
)
library(ArchR)
addArchRThreads(threads = 1)
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
)
inputFiles <- getTutorialData("Hematopoiesis")
addArchRGenome("hg19")
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
)
doubScores <- addDoubletScores(
input = ArrowFiles,
)
doubScores <- addDoubletScores(
input = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/DOGMAseq1.arrow"
)
?createArrowFiles()
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 0,minFrags = 0,maxFrags = 1e+10, maxFragSize = 1e+10)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 0,minFrags = 0)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 1,minFrags = 1,maxFrags = 1e+10, maxFragSize = 1e+10)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 1,minFrags = 1,maxFrags = 1e+05, maxFragSize = 2000, minFragSize = 10)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 4,minFrags = 2,maxFrags = 1e+05, maxFragSize = 2000, minFragSize = 10)
addDoubletScores(input = "DOGMAseq1.arrow")
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 2,minFrags = 2,maxFrags = 1e+10, maxFragSize = 1e+10, minFragSize = 1)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 2,minFrags = 2,maxFrags = 1e+10, maxFragSize = 1e+10, minFragSize = 1,force=TRUE)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 2,minFrags = 2,maxFrags = 1e+10, maxFragSize = 2000, minFragSize = 1,force=TRUE)
addArchRGenome("hg38")
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1",minTSS = 1,minFrags = 1,maxFrags = 1e+10, maxFragSize = 1e+10, minFragSize = 1,force=TRUE)
doubletscore <- addDoubletScores(input = "DOGMAseq1.arrow")
View(doubletscore)
doubletscore[[1]]@listData[["doubletScore"]]
max(doubletscore[[1]]@listData[["doubletScore"]])
?filterDoublets()
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq1.arrow",
outputDirectory = "DOGMAseq",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
View(projHeme1)
projHeme1@cellColData
projHeme1 <- filterDoublets(projHeme1)
View(projHeme1)
?write.csv()
write.csv(projHeme1@cellColData,"DOGMAseq1_afterfilter.csv")
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq1.arrow",
outputDirectory = "DOGMAseq",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
write.csv(projHeme1@cellColData,"DOGMAseq1_allcells.csv")
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DIG/atac_fragments.tsv.gz", sampleNames = "DOGMAseq-DIG",minTSS = 1,minFrags = 1,maxFrags = 1e+10, maxFragSize = 1e+10, minFragSize = 1,force=TRUE)
doubletscore <- addDoubletScores(input = "DOGMAseq-DIG.arrow")
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq-DIG.arrow",
outputDirectory = "DOGMAseq",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
write.csv(projHeme1@cellColData, "./DOGMAseq-DIG_allcells.csv")
projHeme1 <- filterDoublets(projHeme1)
write.csv(projHeme1@cellColData, "./DOGMAseq-DIG_afterfilter.csv")
projHeme1 <- ArchRProject(
ArrowFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq1.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq1",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
addArchRGenome("hg38")
projHeme1 <- ArchRProject(
ArrowFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq1.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq1",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
View(projHeme1)
doubScores <- addDoubletScores(
input = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq1.arrow",
k = 10, #Refers to how many cells near a "pseudo-doublet" to count.
knnMethod = "UMAP", #Refers to the embedding to use for nearest neighbor search with doublet projection.
LSIMethod = 1
)
readRDS("/Users/chan/QualityControl/DOGMAseq-DIG/DOGMAseq-DIG-Pre-Filter-Metadata.rds")
data = readRDS("/Users/chan/QualityControl/DOGMAseq-DIG/DOGMAseq-DIG-Pre-Filter-Metadata.rds")
View(data)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq1")
doubScores <- addDoubletScores(
input = "DOGMAseq1.arrow",
k = 10, #Refers to how many cells near a "pseudo-doublet" to count.
knnMethod = "UMAP", #Refers to the embedding to use for nearest neighbor search with doublet projection.
LSIMethod = 1
)
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq1.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq1",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
View(projHeme1)
write.csv(projHeme1@cellColData, "./DOGMAseq1_allcells.csv")
filterDoublets(projHeme1)
doubScores <- addDoubletScores(
input = "DOGMAseq1.arrow",
)
View(doubScores)
doubScores <- addDoubletScores(
input = "DOGMAseq1.arrow",
)
View(data)
View(doubScores)
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DIG/atac_fragments.tsv.gz", sampleNames = "DOGMAseq-DIG",force=TRUE)
doubScores <- addDoubletScores(
input = "DOGMAseq-DIG.arrow",
)
View(doubScores)
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq-DIG.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq-DIG",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
write.csv(projHeme1@cellColData, "./DOGMAseq-DIG_allcells.csv")
filterDoublets(projHeme1)
write.csv(projHeme1@cellColData, "./DOGMAseq-DIG_filtered.csv")
doubScores <- addDoubletScores(
input = "DOGMAseq-DIG.arrow",
)
doubScores <- addDoubletScores(
input = "DOGMAseq-DIG.arrow",
k=30,
)
View(doubScores)
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq-DIG.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq-DIG",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
)
write.csv(projHeme1@cellColData, "./DOGMAseq-DIG_allcells.csv")
filterDoublets(projHeme1)
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq-DIG.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq-DIG",
copyArrows = TRUE #This is recommened so that if you modify the Arrow files you have an original copy for later usage.
force=TRUE
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq-DIG.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq-DIG",
copyArrows = TRUE,
)
write.csv(projHeme1@cellColData, "./DOGMAseq-DIG_allcells.csv")
filterDoublets(projHeme1)
write.csv(projHeme1@cellColData, "./DOGMAseq-DIG_filtered.csv")
createArrowFiles(inputFiles = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/1/atac_fragments.tsv.gz", sampleNames = "DOGMAseq-1",force=TRUE)
doubScores <- addDoubletScores(
input = "DOGMAseq-1.arrow",
k=30,
)
View(doubScores)
projHeme1 <- ArchRProject(
ArrowFiles = "DOGMAseq-1.arrow",
outputDirectory = "/Users/chan/Desktop/DoubletsDetection/data/DOGMAseq/ATAC/DOGMAseq-1",
copyArrows = TRUE,
)
write.csv(projHeme1@cellColData, "./DOGMAseq-1_allcells.csv")
filterDoublets(projHeme1)
write.csv(projHeme1@cellColData, "./DOGMAseq-1_filtered.csv")
remotes::install_github("liamrevell/phytools")
remotes::install_github("liamrevell/phytools")
library(phytools)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree",force = TRUE)
remotes::install_github('YuLab-SMU/ggtree')
library(ggtree)
install.packages("vctrs")
library(ggtree)
tree_file <- "~/Desktop/PhyloVelo/KPTracer-Data/trees/3726_NT_T2_tree.nwk"
tree <- read.tree(tree_file
)
ggtree_obj <- ggtree(tree, layout='circular')
print(ggtree_obj)
ggtree_obj <- ggtree_obj +
geom_treescale(x=10, y=1, fontsize=3, linesize=0.5) +
labs(title = "Radial Phylogenetic Tree")
tree_file <- "~/Desktop/PhyloVelo/KPTracer-Data/trees/3726_NT_T1_tree.nwk"
tree <- read.tree(tree_file)
ggtree_obj <- ggtree(tree, layout='circular')
print(ggtree_obj)
tree_file <- "~/Desktop/PhyloVelo/KPTracer-Data/trees/3777_Apc_T6_tree.nwk"
ggtree_obj <- ggtree(tree, layout='circular')
print(ggtree_obj)
ggtree_obj <- ggtree(tree, layout='circular') + geom_tree(size=0.2)
print(ggtree_obj)
ggtree_obj <- ggtree(tree, layout='circular') + geom_tree(size=0.02)
print(ggtree_obj)
ggtree_obj <- ggtree(tree, layout='circular') + xlim(-10, NA)
print(ggtree_obj)
library(ggplot2)
library(RColorBrewer)
setwd("~/Documents/GitHub/ProteinWatermark/Experiments/")
pg_performance <- read.csv("./protein_generator/pg_wm_performance.csv")
colormap <- c(argmax = '#88CEEF', multinomial = '#EE885F', watermarked = '#E42A2A')
# Create the violin plot
p <- ggplot(data, aes(x = task, y = `best pLDDT`, fill = factor(type))) +
geom_violin() +
scale_fill_manual(values = colormap) +
theme_minimal() +
theme(legend.position = "none",
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
colormap <- c(argmax = '#88CEEF', multinomial = '#EE885F', watermarked = '#E42A2A')
# Create the violin plot
p <- ggplot(pg_performance, aes(x = task, y = `best pLDDT`, fill = factor(type))) +
geom_violin() +
scale_fill_manual(values = colormap) +
theme_minimal() +
theme(legend.position = "none",
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggsave("protein_generator_watermark_performance.pdf", plot = p, device = "pdf", width = 12, height = 4)
colormap <- c(argmax = '#88CEEF', multinomial = '#EE885F', watermarked = '#E42A2A')
# Create the violin plot
p <- ggplot(pg_performance, aes(x = task, y = `best.pLDDT`, fill = factor(type))) +
geom_violin() +
scale_fill_manual(values = colormap) +
theme_minimal() +
theme(legend.position = "none",
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggsave("protein_generator_watermark_performance.pdf", plot = p, device = "pdf", width = 12, height = 4)
